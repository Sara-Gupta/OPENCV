import cv2
import numpy as np


# noinspection PyUnresolvedReferences
def region_of_interest(img, vertices):
    mask = np.zeros_like(img)
    # channel_count = img.shape[2]
    match_mask_color = 255
    cv2.fillPoly(mask, vertices, match_mask_color)
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image


# noinspection PyUnresolvedReferences
def draw_the_lines(img, lines):
    img = np.copy(img)
    blank_image = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8)

    for line in lines:
        for x1, y1, x2, y2 in line:
            # noinspection PyUnresolvedReferences
            cv2.line(blank_image, (x1, y1), (x2, y2), (0, 255, 0), thickness=2)

    img = cv2.addWeighted(img, 0.8, blank_image, 1, 0.0)
    return img

# image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
# noinspection PyUnresolvedReferences


def process(image):
    print(image.shape)
    height = image.shape[0]
    width = image.shape[1]
    region_of_interest_vertices = [
        (200, height),
        (width/2, height/1.35),
        (width-300, height)
    ]
    gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    canny_image = cv2.Canny(gray_image, 400, 700)
    #canny_image_n = cv2.resize(canny_image, (700, 500))
    blur = cv2.GaussianBlur(canny_image, (5, 5), 0)
    blurn = cv2.resize(blur, (700, 500))
    #cv2.imshow('image', canny_image_n)
    #cv2.imshow('blur', blurn)
    cropped_image = region_of_interest(blur, np.array([region_of_interest_vertices], np.int32),)
    #cv2.imshow('cropped', cropped_image)
    lines = cv2.HoughLinesP(cropped_image,
                            rho=2,
                            theta=np.pi/180,
                            threshold=80,
                            lines=np.array([]),
                            minLineLength=20,
                            maxLineGap=400)
    image_with_lines = draw_the_lines(image, lines)
    return image_with_lines


# noinspection PyUnresolvedReferences
cap = cv2.VideoCapture('Easy_Test.mp4')

while cap.isOpened():
    ret, frame = cap.read()
    frame = process(frame)
    # noinspection PyUnresolvedReferences
    framen = cv2.resize(frame, (900,500))
    cv2.imshow('frame', framen)

    # noinspection PyUnresolvedReferences
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
# noinspection PyUnresolvedReferences
cv2.destroyAllWindows()
